// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Wine {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  year         String
  type         WineType  @default(RED)
  varietal     Varietal  @default(MERLOT)
  rating       String?
  consumed     Boolean?
  dateConsumed DateTime? @updatedAt
  User         User?     @relation(fields: [userId], references: [id])
  userId       String?   @db.ObjectId
}

// Define the enum for wine types
enum WineType {
  RED
  WHITE
  ROSE
  WHITEBLEND
  REDBLEND
}

// Define the enum for wine varietals
enum Varietal {
  CABERNETSAUVIGNON
  MERLOT
  SHIRAZ
  CHENINBLANC
  SAUVIGNONBLANC
  VERDELHO
  CHARDONNAY
  DURIF
  // Add more varietals as needed
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("account")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  assignedWine  Wine[]

  @@map("user")
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
